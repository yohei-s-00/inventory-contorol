# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateOrderInput {
  inventoryId: String
  mailContent: String!
  sendAdress: String!
  sendCc: String!
  title: String!
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input InventoryCreateInput {
  inventoryItems: Int!
  name: String!
  orderCode: String!
  price: Int!
  requiredItems: Int!
  status: String!
  type: String!
}

type InventoryModel {
  createdAt: DateTime!
  id: ID!
  inventoryItems: Float!
  name: String!
  order: [OrderModel!]!
  orderCode: String!
  orderDates: DateTime
  price: Float!
  requiredItems: Float!
  status: String!
  thumbNailUrl: String
  type: String!
  updatedAt: DateTime!
}

input InventoryUpdateInput {
  createdAt: DateTime
  inventoryItems: Int
  name: String
  orderCode: String
  price: Int
  requiredItems: Int
  status: String
  type: String
  updatedAt: DateTime
}

input InventoryWhereInput {
  id: ID
}

type LoginResponse {
  access_token: String!
  refresh_token: String!
  user: UserModel!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  addOrder(input: CreateOrderInput!): OrderModel!
  createInventory(input: InventoryCreateInput!): InventoryModel!
  createUser(input: UserCreateInput!): UserModel!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  logout: Boolean!
  refreshToken: LoginResponse!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereInput!): InventoryModel!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type OrderModel {
  id: ID!
  inventoryId: String!
  mailContent: String!
  sendAdress: String!
  sendCc: String!
  title: String!
  type: String!
}

type Query {
  findInventory(id: String, name: String): InventoryModel!
  inventories: [InventoryModel!]
  inventoryCards: [InventoryModel!]
  orders(inventoryId: String, sortAs: String = "desc"): [OrderModel!]
  user(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): UserModel!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input UserCreateInput {
  email: String!
  name: String!
  password: String!
}

type UserModel {
  """@Validator.@IsEmail()"""
  email: String!
  id: ID!
  name: String!
}

input UserOrderByWithRelationInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  email
  hashedRefreshToken
  id
  name
  password
  updatedAt
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  id: IntFilter
  name: StringFilter
  password: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}